<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_car</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_car_parents</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// 특수한 변수
step_one = 0; // 최초 1회 실행. (event_user_0 참고)

/*
    할당받는 변수
    state_where: 어디서 시작했는지(누적) ( 0:왼쪽  1:아래  2:오른쪽  3:위쪽 )
    state_will: 어디로 갈 것인지 
    init_spd: 해당 차량의 최대속도
*/

// 일반 변수
// want_spd: 1스텝 후 init_spd로 초기화됨
resist = 0; // 도중에 신호가 바뀌더라도 유지.
step_count = 0; // 유지 기간 설정을 위한 count.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// 최초 1회
if step_one == 0 {
    step_one = 1;
    want_spd = init_spd; // 가속 등을 위함
    event_user(0);
}

// 신호준수
other_id = instance_place(x+lengthdir_x(init_spd,direction),y+lengthdir_y(init_spd,direction),o_traffic_light);
want_spd = init_spd;
if (other_id != -4) {
    if (state_will != 2 &amp;&amp; resist != 1) { // 우회전하고 진행 중은 무시
        //진행 신호
        if (other_id.image_index == 2) {
            resist = 1;
        }
        // 빨 또는 노
        else if (other_id.image_index == 0 || other_id.image_index == 1) {
            want_spd = 0;
        }
    }
}
if (resist == 1) { // 진행 중에는 계속 진행, 충분히 진행 시 초기화
    step_count += 1;
    if (path_speed * step_count &gt;= 20+15+10) {
        resist = 0;
        step_count = 0;
    }
}

// 충돌방지 - 각도로 한 번 방지
image_blend = c_white;
// 원래 4
other_id = instance_place(x+lengthdir_x(init_spd+3,direction),y+lengthdir_y(init_spd+3,direction),o_car_parents);
if (other_id != -4) {
    image_blend = c_blue;
    delta = abs(other_id.direction - direction);
    if (delta &gt; 180) {
        delta = 360-delta;
    }
    if (delta &lt;= 95) {
        image_blend = c_red;
        want_spd = 0;
    }
}

// 방향
image_angle = direction;

// 방향 최적화
while (direction &gt;= 360) {
    direction -= 360;
}

// 가속
if (path_speed &lt; want_spd)
    path_speed += 0.2;
if (path_speed &gt; want_spd)
    path_speed = want_spd;

/* 신호탐지 - 구버전 방식
other_id = instance_position(x,y,o_road_parent);
if (other_id != -4) {
    // 우회전은 신호무시
    if (state_will == 0) { // 좌회전
        if (other_id.light_mode[state_where] != 2)
            if (path_position &gt;= 0.22 &amp;&amp; path_position &lt;= 0.23) // 진행 중에 멈추지 않음
                path_speed = 0;
    }
    if (state_will == 1) { // 직진
        if (other_id.light_mode[state_where] &lt;= 1)
            if (path_position &gt;= 0.22 &amp;&amp; path_position &lt;= 0.23) // 진행 중에 멈추지 않음
                path_speed = 0;
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
state_where: 초기 상태 및 앞으로 누적될 상태 (처음엔 with로 받음)
    

state_will: 좌회전, 직진, 우회전 예정 등에 대한 정보
    0(좌회전)  1(직진)  2(우회전)
    
state_path: 예정 path (아래 switch문에서 결정됨)
*/
direction = state_where / 2 * 90;

// 추후 여기서 초기 좌표도 좀 잡아주셈
if (state_where &lt;= 1) {
    switch (state_will) {
    case 0: state_path = p_left_left; break;
    case 1: state_path = p_st_left; break;
    case 2: state_path = p_right_left; break;
    }
}
else if (state_where &lt;= 3) {
    switch (state_will) {
    case 0: state_path = p_left_down; break;
    case 1: state_path = p_st_down; break;
    case 2: state_path = p_right_down; break;
    }
}
else if (state_where &lt;= 5) {
    switch (state_will) {
    case 0: state_path = p_left_right; break;
    case 1: state_path = p_st_right; break;
    case 2: state_path = p_right_right; break;
    }
}
else if (state_where &lt;= 7) {
    switch (state_will) {
    case 0: state_path = p_left_up; break;
    case 1: state_path = p_st_up; break;
    case 2: state_path = p_right_up; break;
    }
}
else {
    show_message("asser: car_universial: state_where이 정해지지 않음.");
    game_end();
}

//if (state_will == 0 || state_will == 2) {
path_start(state_path, 0, 0, 0);
//path_speed = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*&lt; 한 블록을 이동한 뒤 새로운 state_where이 정해지는 방법 &gt;

state_will이 0인 경우)
state_where += 2
(단, 6,7인 경우 0,1로 변경)

state_will이 2인 경우)
state_where -= 2
(단, 0,1인 경우 6,7로 변경)

state_will이 1인 경우)
state_where = state_where

*/

// next state_where
switch (state_will) {
case 0:
    state_where += 2;
    if (state_where &gt; 7)
        state_where -= 8;
    break;
case 2:
    state_where -= 2;
    if (state_where &lt; 0)
        state_where += 8;
    break;
}
// next state_will
if (irandom(1) == 0) {
    state_will = 1;
}
else {
    if (state_will == 0) {state_will = 0;}
    else if (state_will == 2) {state_will = 2;}
    else if (state_where % 2 == 0) {state_will = 0;}
    else if (state_where % 2 == 1) {state_will = 2;}
    else {show_message("assert: end of path: state_will: " + string(state_will));}
}

event_user(0);
path_speed = want_spd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
//draw_set_colour(c_white);
//draw_text(x,y,direction);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
